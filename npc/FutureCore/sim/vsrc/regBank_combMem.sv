// Generated by CIRCT firtool-1.44.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// VCS coverage exclude_file
module regBank_combMem(	// @[FutureCore/src/main/scala/futurecore/backend/RegFile.scala:38:20]
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data,
  output [31:0] R0_data,
                R1_data
);

  reg [31:0] Memory[0:31];	// @[FutureCore/src/main/scala/futurecore/backend/RegFile.scala:38:20]
  always @(posedge W0_clk) begin	// @[FutureCore/src/main/scala/futurecore/backend/RegFile.scala:38:20]
    if (W0_en)	// @[FutureCore/src/main/scala/futurecore/backend/RegFile.scala:38:20]
      Memory[W0_addr] <= W0_data;	// @[FutureCore/src/main/scala/futurecore/backend/RegFile.scala:38:20]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// @[FutureCore/src/main/scala/futurecore/backend/RegFile.scala:38:20]
    reg [31:0] _RANDOM_MEM;	// @[FutureCore/src/main/scala/futurecore/backend/RegFile.scala:38:20]
    initial begin	// @[FutureCore/src/main/scala/futurecore/backend/RegFile.scala:38:20]
      `INIT_RANDOM_PROLOG_	// @[FutureCore/src/main/scala/futurecore/backend/RegFile.scala:38:20]
      `ifdef RANDOMIZE_MEM_INIT	// @[FutureCore/src/main/scala/futurecore/backend/RegFile.scala:38:20]
        for (logic [5:0] i = 6'h0; i < 6'h20; i += 6'h1) begin
          _RANDOM_MEM = `RANDOM;	// @[FutureCore/src/main/scala/futurecore/backend/RegFile.scala:38:20]
          Memory[i[4:0]] = _RANDOM_MEM;	// @[FutureCore/src/main/scala/futurecore/backend/RegFile.scala:38:20]
        end	// @[FutureCore/src/main/scala/futurecore/backend/RegFile.scala:38:20]
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// @[FutureCore/src/main/scala/futurecore/backend/RegFile.scala:38:20]
  assign R1_data = R1_en ? Memory[R1_addr] : 32'bx;	// @[FutureCore/src/main/scala/futurecore/backend/RegFile.scala:38:20]
endmodule

