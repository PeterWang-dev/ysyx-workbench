$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module FutureCore $end
  $var wire 1 D clock $end
  $var wire 1 E reset $end
  $var wire 32 F io_instIn [31:0] $end
  $var wire 32 G io_instAddrOut [31:0] $end
  $var wire 32 H io_debug_pcInstAddr [31:0] $end
  $var wire 5 I io_debug_instDecRs1 [4:0] $end
  $var wire 5 J io_debug_instDecRs2 [4:0] $end
  $var wire 5 K io_debug_instDecRd [4:0] $end
  $var wire 1 L io_debug_instDecWriteEnable $end
  $var wire 1 M io_debug_instDecIsImmidiate $end
  $var wire 1 N io_debug_instDecIsEbreak $end
  $var wire 32 O io_debug_regFileRs1Data [31:0] $end
  $var wire 32 P io_debug_regFileRs2Data [31:0] $end
  $var wire 32 Q io_debug_immGenImmidiate [31:0] $end
  $var wire 32 R io_debug_adderResult [31:0] $end
  $scope module FutureCore $end
   $var wire 1 D clock $end
   $var wire 1 E reset $end
   $var wire 32 F io_instIn [31:0] $end
   $var wire 32 G io_instAddrOut [31:0] $end
   $var wire 32 G io_debug_pcInstAddr [31:0] $end
   $var wire 5 I io_debug_instDecRs1 [4:0] $end
   $var wire 5 J io_debug_instDecRs2 [4:0] $end
   $var wire 5 K io_debug_instDecRd [4:0] $end
   $var wire 1 L io_debug_instDecWriteEnable $end
   $var wire 1 L io_debug_instDecIsImmidiate $end
   $var wire 1 N io_debug_instDecIsEbreak $end
   $var wire 32 O io_debug_regFileRs1Data [31:0] $end
   $var wire 32 P io_debug_regFileRs2Data [31:0] $end
   $var wire 32 Q io_debug_immGenImmidiate [31:0] $end
   $var wire 32 R io_debug_adderResult [31:0] $end
   $scope module adder $end
    $var wire 32 O io_operand1 [31:0] $end
    $var wire 32 S io_operand2 [31:0] $end
    $var wire 32 R io_result [31:0] $end
   $upscope $end
   $scope module ebreakDPI $end
    $var wire 1 D clock $end
    $var wire 1 E reset $end
    $var wire 1 N isEbreak $end
   $upscope $end
   $scope module immGen $end
    $var wire 32 F io_inst [31:0] $end
    $var wire 32 Q io_immidiate [31:0] $end
   $upscope $end
   $scope module instDec $end
    $var wire 32 F io_inst [31:0] $end
    $var wire 5 I io_rs1 [4:0] $end
    $var wire 5 J io_rs2 [4:0] $end
    $var wire 5 K io_rd [4:0] $end
    $var wire 1 L io_writeEnable $end
    $var wire 1 L io_isImmidiate $end
    $var wire 1 N io_isEbreak $end
   $upscope $end
   $scope module pc $end
    $var wire 1 D clock $end
    $var wire 1 E reset $end
    $var wire 32 G io_instAddr [31:0] $end
    $var wire 32 # pc [31:0] $end
   $upscope $end
   $scope module regFile $end
    $var wire 1 D clock $end
    $var wire 5 I io_rs1Addr [4:0] $end
    $var wire 5 J io_rs2Addr [4:0] $end
    $var wire 1 L io_writeEnable $end
    $var wire 5 K io_rdAddr [4:0] $end
    $var wire 32 R io_rdData [31:0] $end
    $var wire 32 O io_rs1Data [31:0] $end
    $var wire 32 P io_rs2Data [31:0] $end
    $scope module regBank_ext $end
     $var wire 5 I R0_addr [4:0] $end
     $var wire 1 W R0_en $end
     $var wire 1 D R0_clk $end
     $var wire 5 J R1_addr [4:0] $end
     $var wire 1 W R1_en $end
     $var wire 1 D R1_clk $end
     $var wire 5 K W0_addr [4:0] $end
     $var wire 1 L W0_en $end
     $var wire 1 D W0_clk $end
     $var wire 32 T W0_data [31:0] $end
     $var wire 32 U R0_data [31:0] $end
     $var wire 32 V R1_data [31:0] $end
     $var wire 32 $ Memory[0] [31:0] $end
     $var wire 32 % Memory[1] [31:0] $end
     $var wire 32 & Memory[2] [31:0] $end
     $var wire 32 ' Memory[3] [31:0] $end
     $var wire 32 ( Memory[4] [31:0] $end
     $var wire 32 ) Memory[5] [31:0] $end
     $var wire 32 * Memory[6] [31:0] $end
     $var wire 32 + Memory[7] [31:0] $end
     $var wire 32 , Memory[8] [31:0] $end
     $var wire 32 - Memory[9] [31:0] $end
     $var wire 32 . Memory[10] [31:0] $end
     $var wire 32 / Memory[11] [31:0] $end
     $var wire 32 0 Memory[12] [31:0] $end
     $var wire 32 1 Memory[13] [31:0] $end
     $var wire 32 2 Memory[14] [31:0] $end
     $var wire 32 3 Memory[15] [31:0] $end
     $var wire 32 4 Memory[16] [31:0] $end
     $var wire 32 5 Memory[17] [31:0] $end
     $var wire 32 6 Memory[18] [31:0] $end
     $var wire 32 7 Memory[19] [31:0] $end
     $var wire 32 8 Memory[20] [31:0] $end
     $var wire 32 9 Memory[21] [31:0] $end
     $var wire 32 : Memory[22] [31:0] $end
     $var wire 32 ; Memory[23] [31:0] $end
     $var wire 32 < Memory[24] [31:0] $end
     $var wire 32 = Memory[25] [31:0] $end
     $var wire 32 > Memory[26] [31:0] $end
     $var wire 32 ? Memory[27] [31:0] $end
     $var wire 32 @ Memory[28] [31:0] $end
     $var wire 32 A Memory[29] [31:0] $end
     $var wire 32 B Memory[30] [31:0] $end
     $var wire 32 C Memory[31] [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
1D
0E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000 I
b00000 J
b00000 K
0L
0M
0N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
1W
